@model IEnumerable<BrandHandlerWebApp.Models.Users>
@{
    ViewData["Title"] = "Manage Brand Users";
}

<div class="container-fluid">
    <div aria-live="polite" aria-atomic="true" class="position-relative">
        <div class="toast-container position-fixed bottom-0 end-0 p-3" id="toastContainer">
            <!-- Toasts will be appended here -->
        </div>
    </div>
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1 class="h3 mb-0 text-gray-800">Manage Brand Users</h1>
        <button class="btn btn-success" data-bs-toggle="modal" data-bs-target="#addUserModal">
            <i class="bi bi-person-plus"></i> Add New User
        </button>
    </div>

    <!-- Users Table -->
    <div class="card shadow mb-4">
        <div class="card-header py-3">
            <h6 class="m-0 font-weight-bold text-primary">Brand Users List</h6>
        </div>
        <div class="card-body">
            @if (Model.Any())
            {
                <div class="table-responsive">
                    <table class="table table-bordered table-hover" id="usersTable" width="100%" cellspacing="0">
                        <thead class="thead-dark">
                            <tr>
                                <th>Full Name</th>
                                <th>Email</th>
                                <th>Registration Email</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var user in Model)
                            {
                                <tr>
                                    <td>@user.FullName</td>
                                    <td>@user.Email</td>
                                    <td>
                                        <span class="badge 
                                            @(user.IsEmailConfirmed ? "bg-success" : "bg-warning")">
                                            @(user.IsEmailConfirmed ? "Confirmed" : "Pending")
                                        </span>
                                    </td>
                                    <td>
                                        <div class="btn-group" role="group">
                                            <button class="btn btn-sm btn-primary edit-user" 
                                                    data-user-id="@user.Id" 
                                                    data-full-name="@user.FullName" 
                                                    data-email="@user.Email">
                                                <i class="bi bi-pencil"></i> Edit
                                            </button>
                                            <button class="btn btn-sm btn-danger delete-user" data-user-id="@user.Id">
                                                <i class="bi bi-trash"></i> Delete
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
            else
            {
                <div class="text-center py-5">
                    <i class="bi bi-people fs-1 text-muted mb-3"></i>
                    <p class="text-muted mb-0">No brand users found.</p>
                </div>
            }
        </div>
    </div>
</div>

<!-- Add User Modal -->
<div class="modal fade" id="addUserModal" tabindex="-1" aria-labelledby="addUserModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addUserModalLabel">Add New Brand User</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="addUserForm">
                    @Html.AntiForgeryToken()
                    <div class="mb-3">
                        <label for="fullName" class="form-label">Full Name</label>
                        <input type="text" class="form-control" id="fullName" required>
                    </div>
                    <div class="mb-3">
                        <label for="email" class="form-label">Email</label>
                        <input type="email" class="form-control" id="email" required>
                    </div>
                    <div class="mb-3">
                        <label for="password" class="form-label">Password</label>
                        <input type="password" class="form-control" id="password" required>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="saveUserBtn">Save User</button>
            </div>
        </div>
    </div>
</div>

<!-- Edit User Modal -->
<div class="modal fade" id="editUserModal" tabindex="-1" aria-labelledby="editUserModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editUserModalLabel">Edit Brand User</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="editUserForm">
                    @Html.AntiForgeryToken()
                    <input type="hidden" id="editUserId">
                    <div class="mb-3">
                        <label for="editFullName" class="form-label">Full Name</label>
                        <input type="text" class="form-control" id="editFullName" required>
                    </div>
                    <div class="mb-3">
                        <label for="editEmail" class="form-label">Email</label>
                        <input type="email" class="form-control" id="editEmail" required>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="updateUserBtn">Update User</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Function to show toast messages
        function showToast(message, type = 'success') {
            const toastContainer = document.getElementById('toastContainer');
            if (!toastContainer) {
                console.error('Toast container not found');
                return;
            }

            const toast = document.createElement('div');
            toast.className = `toast align-items-center text-white bg-${type} border-0`
            toast.setAttribute('role', 'alert');
            toast.setAttribute('aria-live', 'assertive');
            toast.setAttribute('aria-atomic', 'true');
            toast.innerHTML = `
                <div class="d-flex">
                    <div class="toast-body">
                        ${message}
                    </div>
                    <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
                </div>
            `;

            toastContainer.appendChild(toast);
            const bsToast = new bootstrap.Toast(toast);
            bsToast.show();

            toast.addEventListener('hidden.bs.toast', function () {
                toast.remove();
            });
        }

        // Add User functionality
        document.getElementById('saveUserBtn').addEventListener('click', async function () {
            const fullName = document.getElementById('fullName').value;
            const email = document.getElementById('email').value;
            const password = document.getElementById('password').value;

            if (!fullName || !email || !password) {
                showToast('Please fill in all fields.', 'danger');
                return;
            }

            try {
                const response = await fetch('/Admin/AddUser', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: JSON.stringify({ fullName, email, password })
                });

                const result = await response.json();

                if (response.ok) {
                    showToast(result.message, 'success');
                    bootstrap.Modal.getInstance(document.getElementById('addUserModal')).hide();
                    location.reload();
                } else {
                    showToast(result.message || 'Failed to add user.', 'danger');
                }
            } catch (error) {
                console.error('Error adding user:', error);
                showToast('An error occurred while adding the user.', 'danger');
            }
        });

        // Edit User functionality
        document.querySelectorAll('.edit-user').forEach(button => {
            button.addEventListener('click', function () {
                const userId = this.getAttribute('data-user-id');
                const fullName = this.getAttribute('data-full-name');
                const email = this.getAttribute('data-email');

                document.getElementById('editUserId').value = userId;
                document.getElementById('editFullName').value = fullName;
                document.getElementById('editEmail').value = email;

                new bootstrap.Modal(document.getElementById('editUserModal')).show();
            });
        });

        document.getElementById('updateUserBtn').addEventListener('click', async function () {
            const id = document.getElementById('editUserId').value;
            const fullName = document.getElementById('editFullName').value;
            const email = document.getElementById('editEmail').value;

            if (!fullName || !email) {
                showToast('Please fill in all fields.', 'danger');
                return;
            }

            try {
                const response = await fetch('/Admin/EditUser', {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: JSON.stringify({ id, fullName, email })
                });

                const result = await response.json();

                if (response.ok) {
                    showToast(result.message, 'success');
                    bootstrap.Modal.getInstance(document.getElementById('editUserModal')).hide();
                    location.reload();
                } else {
                    showToast(result.message || 'Failed to update user.', 'danger');
                }
            } catch (error) {
                console.error('Error updating user:', error);
                showToast('An error occurred while updating the user.', 'danger');
            }
        });

        // Delete User functionality
        document.querySelectorAll('.delete-user').forEach(button => {
            button.addEventListener('click', async function () {
                const userId = this.getAttribute('data-user-id');

                if (confirm('Are you sure you want to delete this user? This action cannot be undone.')) {
                    try {
                        const response = await fetch(`/Admin/DeleteUser?id=${userId}`, {
                            method: 'DELETE',
                            headers: {
                                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                            }
                        });

                        const result = await response.json();

                        if (response.ok) {
                            showToast(result.message, 'success');
                            location.reload();
                        } else {
                            showToast(result.message || 'Failed to delete user.', 'danger');
                        }
                    } catch (error) {
                        console.error('Error deleting user:', error);
                        showToast('An error occurred while deleting the user.', 'danger');
                    }
                }
            });
        });
    </script>
}